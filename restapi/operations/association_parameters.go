// Code generated by go-swagger; DO NOT EDIT.

package operations

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"io"
	"net/http"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	"github.com/go-openapi/runtime/middleware"

	strfmt "github.com/go-openapi/strfmt"
)

// NewAssociationParams creates a new AssociationParams object
// with the default values initialized.
func NewAssociationParams() AssociationParams {
	var ()
	return AssociationParams{}
}

// AssociationParams contains all the bound params for the association operation
// typically these are obtained from a http.Request
//
// swagger:parameters association
type AssociationParams struct {

	// HTTP Request Object
	HTTPRequest *http.Request `json:"-"`

	/*Identifiant du conteneur
	  Required: true
	  In: path
	*/
	CID string
	/*Identifiants des contenus
	  Required: true
	  In: body
	*/
	UIDS []string
}

// BindRequest both binds and validates a request, it assumes that complex things implement a Validatable(strfmt.Registry) error interface
// for simple values it will use straight method calls
func (o *AssociationParams) BindRequest(r *http.Request, route *middleware.MatchedRoute) error {
	var res []error
	o.HTTPRequest = r

	rCID, rhkCID, _ := route.Params.GetOK("c_id")
	if err := o.bindCID(rCID, rhkCID, route.Formats); err != nil {
		res = append(res, err)
	}

	if runtime.HasBody(r) {
		defer r.Body.Close()
		var body []string
		if err := route.Consumer.Consume(r.Body, &body); err != nil {
			if err == io.EOF {
				res = append(res, errors.Required("uIdS", "body"))
			} else {
				res = append(res, errors.NewParseError("uIdS", "body", "", err))
			}

		} else {

			if len(res) == 0 {
				o.UIDS = body
			}
		}

	} else {
		res = append(res, errors.Required("uIdS", "body"))
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *AssociationParams) bindCID(rawData []string, hasKey bool, formats strfmt.Registry) error {
	var raw string
	if len(rawData) > 0 {
		raw = rawData[len(rawData)-1]
	}

	o.CID = raw

	return nil
}
